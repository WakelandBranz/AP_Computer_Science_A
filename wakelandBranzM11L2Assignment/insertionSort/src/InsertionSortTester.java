/*
 * Wakeland Branz
 * Date: 2/4/2024
 * Seaforth High School
 *
 * Description:  Uses insertion sort to demonstrate the properties of arrays
 * Difficulties:  Ensuring that I was not indexing out of range gave me some issues but I resolved them relatively fast.
 * What I Learned:  More in depth array usage
 */

import java.util.Random;
import java.util.Scanner;

public class InsertionSortTester
{
   // Sort the list
   //
   public static void insertionSort (int[] list)
   {
      // check if list is sorted prior to going through the insertion sort process
      if (isSorted(list)) {
         return;
      }
      //  For each unsorted integer
      for (int j = 1; j < list.length; j++)
      {
      
         //  Keep swapping with its left neighbor 
         //  until it is larger or equal to left neighbor
         int k = j;
         while (k > 0 && list[k-1] > list[k] )
         {
            int temp  = list[k-1];
            list[k-1] = list[k];
            list[k]   = temp;
            k--;
         }
      }
   }
   public static boolean isSorted(int[] list) {
      boolean isSorted = true;
      
      for (int i = 0; i < list.length; i++) {
         // if the next index is not greater than the current (ascending order check)
         if (i != list.length - 1 && !(list[i] < list[i + 1])) {
            isSorted = false;
            return isSorted; // save comparisons
         }
      }
      return isSorted;
   }

   public static double getMedian(int[] list) {
      boolean isEven = false; // check if the list length is even to decide logic for the median
      if (list.length % 2 == 0) {
         isEven = true;
      }

      if (isEven) {
         // since we know that the list length is odd, get the two middlemost integers and divide by two to get the median.
         return ((double)list[list.length / 2] + (double)list[list.length/2 - 1]) / 2.0;
      }

      // since we know the list length is even, get the middlemost integer and divide by 2
      return (double) list[(list.length / 2)];
   }
   public static double getMean(int[] list) {
      double sum = 0;
      for (int i = 0; i < list.length; i++) {
         sum += list[i];
      }
      return sum / (double) list.length;
   }
   
   public static void main ( String[] args )
   {
      Scanner scanner = new Scanner(System.in);
      Random rand = new Random();

      System.out.print("Input size of array (between 1 and 10000): ");
      final int SIZE = scanner.nextInt();

      if (SIZE < 1 || SIZE > 10000 ) {
         System.out.println("Inputted size was out of range. Please rerun the program.");
         System.exit(1);
      }
     
      int[] values = new int[SIZE];

      // assign random value between 0 and 99 to each values[i]
      for (int i = 0; i < SIZE; i++) {
        values[i] = rand.nextInt(100);
      }

      if (SIZE > 999) {
         System.out.printf("Before: %b", isSorted(values));
      }
      else {
         // print out the array, ensure to not print a comma if at the end of the array
         System.out.println("Before: "); 
         for (int i = 0; i < values.length; i++) {
            System.out.print( values[i]); 
            if (i != values.length - 1) {
               System.out.print(",");
            }
         }
         System.out.println( );
      }

      // get start time
      long startTime = System.currentTimeMillis();

      // sort the array
      insertionSort( values );

      // get end time and print difference between start and end
      long endTime = System.currentTimeMillis();
      System.out.println("Total execution time: " + (endTime - startTime) );
      
      if (SIZE > 999) {
         System.out.printf("After: %b\n", isSorted(values));
      }
      else {
         // print out the array, ensure to not print a comma if at the end of the array
         System.out.println("After: "); 
         for (int i = 0; i < values.length; i++) {
            System.out.print( values[i]); 
            if (i != values.length - 1) {
               System.out.print(",");
            }
         }
         System.out.println( );
      }
  
      System.out.printf("Median: %f\nMean: %f\n", getMedian(values), getMean(values));
   }
} 

/*
 * Sample output:
 * Input size of array (between 1 and 10000): 900
 * Before: 
 * 49,77,31,26,92,42,73,22,10,62,99,99,68,60,83,14,25,34,89,39,20,72,40,51,70,30,0,9,8,16,67,98,42,28,2,72,42,48,13,9,20,13,7,98,24,23,5,51,42,35,94,20,99,67,60,75,96,85,78,48,32,52,69,62,56,28,66,69,62,77,54,41,60,82,1,95,70,95,64,30,46,30,38,94,9,43,7,81,99,60,80,74,61,97,99,30,19,87,22,89,80,84,3,23,18,96,35,73,47,39,26,68,81,51,48,5,15,56,80,2,93,47,29,16,87,40,93,42,31,12,43,51,59,87,77,81,1,59,8,94,18,99,77,96,87,43,0,48,45,37,0,39,3,56,17,77,29,65,62,67,20,68,31,0,44,89,48,53,3,72,33,59,12,70,26,58,40,78,66,36,70,76,3,82,86,5,8,87,83,52,3,11,54,54,28,20,54,85,32,21,79,67,44,4,68,1,88,90,96,91,42,60,74,0,8,29,40,70,39,83,82,13,36,48,53,3,49,3,58,77,81,63,45,26,15,56,71,25,32,48,84,62,49,34,38,56,69,75,87,14,77,45,46,72,45,93,29,57,71,64,87,43,62,18,97,79,57,56,84,36,67,37,78,87,10,71,42,65,92,20,78,73,90,96,6,8,86,46,2,27,97,63,26,45,80,31,20,74,31,23,64,55,38,27,39,11,74,66,1,40,66,24,24,20,35,93,22,51,10,35,8,38,83,10,63,57,99,84,88,42,87,82,26,18,20,28,35,86,32,89,24,39,91,16,23,22,83,7,56,91,46,29,92,49,85,95,93,56,46,22,66,71,72,45,47,57,4,47,11,67,52,89,82,91,62,54,77,44,82,51,49,38,98,50,68,97,12,38,32,86,31,74,26,74,62,44,19,92,1,56,45,86,18,57,76,56,73,44,76,1,5,93,12,94,97,96,85,5,3,69,13,19,84,3,76,86,78,86,81,99,20,95,78,84,2,67,1,94,98,45,31,21,82,16,58,72,33,82,4,77,62,18,60,43,54,53,12,76,39,35,5,33,81,73,59,40,61,8,50,24,70,49,42,5,11,81,58,97,80,67,75,98,77,5,4,1,53,36,23,3,85,81,76,0,35,28,46,82,30,39,90,68,76,48,48,56,12,16,69,27,95,74,88,27,77,32,85,63,76,56,71,91,76,38,2,63,32,6,56,35,10,54,58,81,90,59,99,23,55,17,62,18,30,36,5,89,81,9,36,87,37,26,21,97,5,19,26,41,94,70,14,2,75,14,77,10,90,44,98,81,42,63,67,72,52,66,35,19,45,96,65,67,30,24,6,92,95,99,25,27,22,76,30,84,23,78,60,88,45,49,37,38,96,18,88,8,31,89,35,97,86,42,51,65,56,88,32,77,98,51,62,13,36,16,46,80,73,11,23,80,99,77,44,51,62,80,74,66,81,28,40,40,59,63,3,51,15,49,21,27,91,67,17,95,19,94,52,75,86,89,69,28,71,80,11,75,66,59,93,5,75,91,89,27,20,79,80,3,66,15,95,82,73,54,64,50,64,7,78,19,69,84,70,57,11,34,2,15,38,72,56,75,16,34,16,87,81,53,23,74,26,26,52,27,52,81,48,59,67,61,43,83,42,39,95,23,93,95,41,94,42,2,59,62,78,17,95,35,7,14,95,68,51,23,70,93,84,68,48,53,68,54,42,1,5,26,76,62,46,20,8,40,60,86,11,35,95,28,0,35,97,98,77,85,25,28,67,65,58,94,26,3,11,81,49,5,71,55,40,98,66,31,95,50,98,52,84,15,28,12,6,40,11,24,44,80,88,43,33,22,73,20,86,5,15,50,71,83,19,36,23,87,44,98,50,7,35,47,5,68,37,63,24,53,46,33,33,23,51,27,66,57,21,38,9,74,97,90,3,40,1,81,58,32,5,92,25,16,99,16,67,47,69,15,20,11,33,12,32,45,67,48,40,76,63,3,86,64,45,11,35,75,45,32,73,31,45,37,48,60,91,7,29,0,6,3,53,45,44,30
 * Total execution time: 3
 * After:
 * 0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,9,9,9,9,9,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,13,13,13,13,13,14,14,14,14,14,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,34,34,34,34,35,35,35,35,35,35,35,35,35,35,35,,43,43,43,43,43,44,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,47,47,47,47,47,47,48,48,48,48,48,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,49,50,50,50,50,50,50,51,51,51,51,51,51,51,51,51,51,51,51,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,55,55,55,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,58,58,58,58,58,58,58,59,59,59,59,59,59,59,59,59,60,60,60,60,60,60,60,60,60,61,61,61,62,62,62,62,62,62,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,64,64,64,64,64,64,65,65,65,65,65,66,66,66,66,66,66,66,66,66,66,66,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,68,68,68,68,68,68,68,68,68,68,69,69,69,69,69,69,69,69,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,72,72,72,72,72,72,72,72,73,73,73,73,73,73,73,73,73,74,74,74,74,74,74,74,74,74,74,75,75,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,76,76,76,76,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,78,78,78,78,78,78,78,78,78,79,79,79,80,80,80,80,80,80,80,80,80,80,80,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,82,82,82,82,82,82,82,82,82,82,83,83,83,83,83,83,83,84,84,84,84,84,84,84,84,84,84,85,85,85,85,85,85,85,86,86,86,86,86,86,86,86,86,86,86,86,87,87,87,87,87,87,87,87,87,87,87,87,88,88,88,88,88,88,88,89,89,89,89,89,89,89,89,89,90,90,90,90,90,90,91,91,91,91,91,91,91,91,92,92,92,92,92,92,93,93,93,93,93,93,93,93,93,94,94,94,94,94,94,94,94,94,95,95,95,95,95,95,95,95,95,95,95,95,95,95,96,96,96,96,96,96,96,96,97,97,97,97,97,97,97,97,97,97,98,98,98,98,98,98,98,98,98,98,98,99,99,99,99,99,99,99,99,99,99,99,99
 * Median: 51.000000
 * Mean: 50.776667
 */